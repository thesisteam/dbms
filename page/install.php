<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
if (SYS::__isProperlyInstalled()) {
    UI::RedirectTo('home');
}

$postUsername = trim(DATA::__GetPOST('postUsername', true, true, true));
$postPass1 = DATA::__GetPOST('postPass1');
$postPass2 = DATA::__GetPOST('postPass2');
$postEmail = DATA::__GetPOST('postEmail', true, true);
$postSecquestion = DATA::__GetPOST('postSecquestion', true, true);
$postSecanswer = DATA::__GetPOST('postSecanswer', true, true);

$postDbhost = DATA::__GetPOST('postDbhost', true, false, true);
$postDbname = DATA::__GetPOST('postDbname', true, false, true);
$postDbuser = DATA::__GetPOST('postDbuser', true, false, true);
$postDbpass = DATA::__GetPOST('postDbpass', true, false);
$postDbport = DATA::__GetPOST('postDbport', true, false, true);
        
if (DATA::__HasPostData()) {
    FLASH::checkAndAdd(array(
        # User account filterers
        'Username contains invalid characters' => STR::__IsValidUsername($string),
        'Username already exists' => ACCOUNTS::Exists(['username' => $postUsername]),
        'Passwords didn\'t match' => strcmp($postPass1, $postPass2),
        'Email is already registered with another user' => ACCOUNTS::Exists(['email' => $postEmail]),
        
        # Database configuration filterers
        'Database name contains invalid characters!' => STR::__HasPunct($postDbname, true),
        'MySQL username is not a valid username!' => STR::__IsValidUsername($postDbuser),
        'Invalid specified MySQL port!' => STR::__IsNumericOnly($postDbport)
    ), 'You have successfully configured Astra Student System!', 'home', Index::__GetPage());
    
    if (FLASH::_getType() === 'PROMPT') {
        # Write the MySQL configuration file first
        $DbConfig = new CONFIG(DIR::$CONFIG . SYS::$CONFIG_DB_FILENAME);
        $DbConfig->SetHeader(array(
            'Configuration file for system\'s database connection',
            'Generated by the system'
        ));
        $DbConfig->Load(array(
            'host' => $postDbhost,
            'port' => $postDbport,
            'db' => $postDbname,
            'user' => $postDbuser,
            'password' => $postDbpass
        ));
        $DbConfig->Write();
        $DbConfig = null;
        
        # Write the Admin setting file
        $Adminconfig = new CONFIG(DIR::$CONFIG . SYS::$CONFIG_ADMIN_FILENAME);
        
        $Adminconfig->SetHeader(array(
            'Configuration file for admin\'s authentication settings',
            'Generated by the system during installation'
        ));
        $Adminconfig->Load(array(
            'username' => $postUsername,
            'password' => ACCOUNTS::Encryptor($postPass1, 'ENCRYPT'),
            'email' => $postEmail,
            'secquestion' => ACCOUNTS::Encryptor($postSecquestion, 'ENCRYPT'),
            'secanswer' => ACCOUNTS::Encryptor($postSecanswer, 'ENCRYPT')
        ));
        $Adminconfig->Write();
        
        UI::RedirectTo('home');
    }
}

?>